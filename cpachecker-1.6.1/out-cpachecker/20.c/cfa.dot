digraph CFA {
8 [shape="circle" label="N8\n45"]
54 [shape="circle" label="N54\n44"]
55 [shape="circle" label="N55\n43"]
56 [shape="circle" label="N56\n42"]
57 [shape="circle" label="N57\n41"]
9 [shape="circle" label="N9\n40"]
1 [shape="circle" label="N1\n5"]
2 [shape="circle" label="N2\n4"]
3 [shape="doublecircle" label="N3\n3"]
5 [shape="circle" label="N5\n2"]
0 [shape="circle" label="N0\n1"]
10 [shape="circle" label="N10\n39"]
11 [shape="circle" label="N11\n38"]
12 [shape="circle" label="N12\n37"]
13 [shape="doublecircle" label="N13\n36"]
15 [shape="diamond" label="N15\n35"]
40 [shape="circle" label="N40\n34"]
51 [shape="doublecircle" label="N51\n28"]
52 [shape="circle" label="N52\n27"]
39 [shape="diamond" label="N39\n33"]
42 [shape="circle" label="N42\n25"]
7 [shape="circle" label="N7\n24"]
43 [shape="diamond" label="N43\n32"]
45 [shape="circle" label="N45\n31"]
44 [shape="diamond" label="N44\n30"]
48 [shape="circle" label="N48\n29"]
47 [shape="circle" label="N47\n26"]
14 [shape="diamond" label="N14\n23"]
18 [shape="circle" label="N18\n22"]
25 [shape="circle" label="N25\n21"]
26 [shape="circle" label="N26\n20"]
27 [shape="circle" label="N27\n19"]
28 [shape="circle" label="N28\n18"]
29 [shape="circle" label="N29\n17"]
30 [shape="circle" label="N30\n16"]
16 [shape="circle" label="N16\n8"]
33 [shape="circle" label="N33\n7"]
34 [shape="diamond" label="N34\n6"]
32 [shape="circle" label="N32\n5"]
35 [shape="circle" label="N35\n4"]
31 [shape="circle" label="N31\n3"]
36 [shape="circle" label="N36\n2"]
37 [shape="circle" label="N37\n1"]
38 [shape="circle" label="N38\n0"]
17 [shape="circle" label="N17\n15"]
19 [shape="circle" label="N19\n14"]
20 [shape="circle" label="N20\n13"]
21 [shape="circle" label="N21\n12"]
22 [shape="circle" label="N22\n11"]
23 [shape="circle" label="N23\n10"]
24 [shape="circle" label="N24\n9"]
4 [shape="circle" label="N4\n0"]
node [shape="circle"]
subgraph cluster___VERIFIER_assume {
label="__VERIFIER_assume()"
1 -> 2 [label="Function start dummy edge"]
2 -> 3 [label="while"]
3 -> 4 [label="[i == 0]"]
3 -> 5 [label="[!(i == 0)]"]
5 -> 0 [label="return;"]
4 -> 3 [label=""]}
subgraph cluster_main {
label="main()"
8 -> 54 [label="INIT GLOBAL VARS"]
54 -> 55 [label="int __VERIFIER_nondet_int();"]
55 -> 56 [label="void __VERIFIER_assume(int i);"]
56 -> 57 [label="void main(int x, int y, int k, int j, int i, int n);"]
57 -> 9 [label="Function start dummy edge"]
9 -> 10 [label="__VERIFIER_assume((x + y) == k);" style="dotted" arrowhead="empty"]
10 -> 11 [label="int m = 0;"]
11 -> 12 [label="j = 0;"]
12 -> 13 [label="while"]
13 -> 14 [label="[j < n]"]
13 -> 15 [label="[!(j < n)]"]
15 -> 39 [label="[(x + y) == k]"]
15 -> 40 [label="[!((x + y) == k)]"]
40 -> 51 [label="Goto: ERROR"]
51 -> 52 [label="Label: ERROR"]
52 -> 51 [label="Goto: ERROR"]
39 -> 43 [label="[n > 0]"]
39 -> 42 [label="[!(n > 0)]"]
42 -> 7 [label="return;"]
43 -> 44 [label="[0 <= m]"]
43 -> 45 [label="[!(0 <= m)]"]
45 -> 51 [label="Goto: ERROR"]
44 -> 47 [label="[m < n]"]
44 -> 48 [label="[!(m < n)]"]
48 -> 51 [label="Goto: ERROR"]
47 -> 42 [label=""]
14 -> 17 [label="[j == i]"]
14 -> 18 [label="[!(j == i)]"]
18 -> 25 [label="int __CPAchecker_TMP_2 = y;"]
25 -> 26 [label="y = y + 1;"]
26 -> 27 [label="__CPAchecker_TMP_2;"]
27 -> 28 [label="int __CPAchecker_TMP_3 = x;"]
28 -> 29 [label="x = x - 1;"]
29 -> 30 [label="__CPAchecker_TMP_3;"]
30 -> 16 [label=""]
16 -> 33 [label="int __CPAchecker_TMP_4;"]
33 -> 34 [label="__CPAchecker_TMP_4 = __VERIFIER_nondet_int();"]
34 -> 31 [label="[__CPAchecker_TMP_4 == 0]"]
34 -> 32 [label="[!(__CPAchecker_TMP_4 == 0)]"]
32 -> 35 [label="m = j;"]
35 -> 31 [label=""]
31 -> 36 [label="int __CPAchecker_TMP_5 = j;"]
36 -> 37 [label="j = j + 1;"]
37 -> 38 [label="__CPAchecker_TMP_5;"]
38 -> 13 [label=""]
17 -> 19 [label="int __CPAchecker_TMP_0 = x;"]
19 -> 20 [label="x = x + 1;"]
20 -> 21 [label="__CPAchecker_TMP_0;"]
21 -> 22 [label="int __CPAchecker_TMP_1 = y;"]
22 -> 23 [label="y = y - 1;"]
23 -> 24 [label="__CPAchecker_TMP_1;"]
24 -> 16 [label=""]}
9 -> 1 [label="__VERIFIER_assume((x + y) == k)"]
0 -> 10 [label="Return edge from __VERIFIER_assume to main"]}