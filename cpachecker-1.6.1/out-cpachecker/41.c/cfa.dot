digraph CFA {
8 [shape="circle" label="N8\n25"]
30 [shape="circle" label="N30\n24"]
31 [shape="circle" label="N31\n23"]
32 [shape="circle" label="N32\n22"]
33 [shape="circle" label="N33\n21"]
9 [shape="circle" label="N9\n20"]
1 [shape="circle" label="N1\n5"]
2 [shape="circle" label="N2\n4"]
3 [shape="doublecircle" label="N3\n3"]
5 [shape="circle" label="N5\n2"]
0 [shape="circle" label="N0\n1"]
10 [shape="circle" label="N10\n19"]
11 [shape="diamond" label="N11\n18"]
13 [shape="circle" label="N13\n17"]
14 [shape="circle" label="N14\n16"]
15 [shape="circle" label="N15\n15"]
12 [shape="circle" label="N12\n14"]
16 [shape="circle" label="N16\n13"]
17 [shape="circle" label="N17\n12"]
18 [shape="doublecircle" label="N18\n11"]
20 [shape="circle" label="N20\n10"]
25 [shape="diamond" label="N25\n9"]
27 [shape="circle" label="N27\n8"]
28 [shape="doublecircle" label="N28\n7"]
26 [shape="circle" label="N26\n6"]
7 [shape="circle" label="N7\n5"]
19 [shape="circle" label="N19\n4"]
21 [shape="circle" label="N21\n3"]
22 [shape="circle" label="N22\n2"]
23 [shape="circle" label="N23\n1"]
24 [shape="circle" label="N24\n0"]
4 [shape="circle" label="N4\n0"]
node [shape="circle"]
subgraph cluster___VERIFIER_assume {
label="__VERIFIER_assume()"
1 -> 2 [label="Function start dummy edge"]
2 -> 3 [label="while"]
3 -> 4 [label="[i == 0]"]
3 -> 5 [label="[!(i == 0)]"]
5 -> 0 [label="return;"]
4 -> 3 [label=""]}
subgraph cluster_main {
label="main()"
8 -> 30 [label="INIT GLOBAL VARS"]
30 -> 31 [label="int __VERIFIER_nondet_int();"]
31 -> 32 [label="void __VERIFIER_assume(int i);"]
32 -> 33 [label="int main(int n, int flag);"]
33 -> 9 [label="Function start dummy edge"]
9 -> 10 [label="__VERIFIER_assume(n >= 0);" style="dotted" arrowhead="empty"]
10 -> 11 [label="int k = 1;"]
11 -> 12 [label="[flag == 0]"]
11 -> 13 [label="[!(flag == 0)]"]
13 -> 14 [label="k = __VERIFIER_nondet_int();"]
14 -> 15 [label="assume(k >= 0);"]
15 -> 12 [label=""]
12 -> 16 [label="int i = 0;"]
16 -> 17 [label="int j = 0;"]
17 -> 18 [label="while"]
18 -> 19 [label="[i <= n]"]
18 -> 20 [label="[!(i <= n)]"]
20 -> 25 [label="int z = (k + i) + j;"]
25 -> 26 [label="[z > (2 * n)]"]
25 -> 27 [label="[!(z > (2 * n))]"]
27 -> 28 [label="Label: ERROR"]
28 -> 28 [label="Goto: ERROR"]
26 -> 7 [label="default return"]
19 -> 21 [label="int __CPAchecker_TMP_0 = i;"]
21 -> 22 [label="i = i + 1;"]
22 -> 23 [label="__CPAchecker_TMP_0;"]
23 -> 24 [label="j = j + i;"]
24 -> 18 [label=""]}
9 -> 1 [label="__VERIFIER_assume(n >= 0)"]
0 -> 10 [label="Return edge from __VERIFIER_assume to main"]}