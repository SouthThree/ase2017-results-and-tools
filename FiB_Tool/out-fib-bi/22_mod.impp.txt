Loading grammar file /home/spencerxiao/Experiments/tacas17/FiB_Tool/IMP_Program.cgt succesfully
verifying assertion: (x = y)
find an inductive invaraint in backward interpolation  based on concrete reachables!
invariant size: 72
interp: (let ((.def_23 (= x y))) (let ((.def_1187 (<= (- 2) (+ (* 2 x) (+ z (* (- 3) (to_int (* (/ 1 3) (to_real (+ (+ z 1) (+ (+ x 1) (+ y 1)))))))))))) (let ((.def_1981 (and .def_1187 (<= (to_real (+ (* 2 x) (+ z (* (- 3) (to_int (* (/ 1 3) (to_real (+ (+ z 1) (+ (+ x 1) (+ y 1)))))))))) (to_real (- 1)))))) (let ((.def_2001 (<= (to_real (+ x (+ y (+ z (+ (* (- 1) k) (* (- 3) (to_int (* (/ 1 3) (to_real (+ (+ (+ (+ (* 1 z) (* 1 y)) (* 1 x)) (* (- 1) k)) 5)))))))))) (to_real (- 4))))) (not (or (and (not .def_23) (or (<= 1 (+ x (* (- 1) y))) (<= (+ x (* (- 1) y)) (- 1)))) (and (and (or (and (and .def_1187 (<= (+ (* 2 x) (+ z (* (- 3) (to_int (* (/ 1 3) (to_real (+ (+ z 1) (+ (+ x 1) (+ y 1))))))))) (- 1))) .def_1981) .def_2001) (or (<= (to_real (- 2)) (to_real (+ (* 2 x) (+ z (* 3 (to_int (* (/ 1 3) (to_real (+ (+ (* (- 1) z) (* (- 2) y)) (- 1)))))))))) (and .def_23 .def_2001))) (or .def_1981 .def_2001))))))))
The assertion is satisfied!
forward [4] times, backtrack [2] times
backward [4] times, backtrack [2] times
verifying assertion: (y = z)
find an inductive invaraint in backward interpolation  based on concrete reachables!
invariant size: 13
interp: (not (and (not (= y z)) (or (<= 1 (+ y (* (- 1) z))) (<= (+ y (* (- 1) z)) (- 1)))))
The assertion is satisfied!
forward [0] times, backtrack [0] times
backward [0] times, backtrack [0] times
