Loading grammar file /home/spencerxiao/Experiments/tacas17/FiB_Tool/IMP_Program.cgt succesfully
verifying assertion: (((i % 2) != 0) | (x = (2 * y)))
find an inductive invaraint in backward interpolation  based on concrete reachables!
invariant size: 42
interp: (let ((.def_36 (+ x (* (- 2) y)))) (let ((.def_185 (<= .def_36 (- 1)))) (let ((.def_190 (or .def_185 (<= 1 .def_36)))) (not (or (and (= (+ i (* (- 2) (to_int (* (/ 1 2) (to_real i))))) 0) .def_190) (and (= (+ i (* (- 2) (to_int (* (/ 1 2) (to_real (+ i 1)))))) (- 1)) (and (or (<= .def_36 0) (and .def_190 (or .def_185 (<= 2 .def_36)))) (<= (to_real (+ i (* (- 2) (to_int (* (/ 1 2) (to_real (+ (* 1 i) 1))))))) (to_real (- 1))))))))))
The assertion is satisfied!
forward [2] times, backtrack [1] times
backward [2] times, backtrack [1] times
