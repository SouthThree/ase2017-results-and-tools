Loading grammar file /home/spencerxiao/Experiments/tacas17/FiB_Tool/IMP_Program.cgt succesfully
verifying assertion: (x = y)
find an inductive invaraint  based on abstractions
invariant size: 63
interp: (let ((.def_23 (= x y))) (let ((.def_479 (<= y x))) (let ((.def_480 (* (- 1) y))) (and (not (<= 1 (+ x .def_480))) (and (not (<= (+ x .def_480) (- 1))) (not (and (and (and .def_23 .def_479) (and .def_23 (<= x y))) (or (<= (to_real (- 2)) (to_real (+ x (+ y (+ z (+ (* (- 1) k) (* 3 (to_int (* (/ 1 3) (to_real (+ (+ (+ (+ .def_480 (* (- 1) x)) (* 1 k)) (* (- 1) z)) (- 1)))))))))))) (and (and (<= (+ x (+ .def_480 (+ k (* (- 3) (to_int (* (/ 1 3) (to_real k))))))) 2) (<= 1 (+ x (+ .def_480 (+ k (* (- 3) (to_int (* (/ 1 3) (to_real k))))))))) (and .def_479 (<= (to_real (+ x (+ .def_480 (+ (* (- 1) k) (* (- 3) (to_int (* (/ 1 3) (to_real (+ (* (- 1) k) 2))))))))) (to_real (- 1)))))))))))))
The assertion is satisfied!
forward [2] times
backward [2] times, backtracks [0] times
verifying assertion: (y = z)
find an inductive invaraint  based on concrete reachables
invariant size: 13
interp: (not (and (not (= y z)) (or (<= 1 (+ y (* (- 1) z))) (<= (+ y (* (- 1) z)) (- 1)))))
The assertion is satisfied!
forward [0] times
backward [0] times, backtracks [0] times
