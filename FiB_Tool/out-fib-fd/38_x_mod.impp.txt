Loading grammar file /home/spencerxiao/Experiments/tacas17/FiB_Tool/IMP_Program.cgt succesfully
verifying assertion: (((i % 2) != 0) | (x = (2 * y)))
find an inductive invaraint based on concrete reachables
invariant size: 40
interp: (let ((.def_36 (+ x (* (- 2) y)))) (let ((.def_178 (<= .def_36 0))) (let ((.def_179 (<= 0 .def_36))) (not (and (and (not (and .def_178 (and (= i 0) .def_179))) (not (and (not (= (+ i (* (- 2) (to_int (* (/ 1 2) (to_real i))))) 0)) (and (<= 1 .def_36) (<= (to_real .def_36) (to_real 1)))))) (not (and .def_178 (and .def_179 (<= (to_real 0) (to_real (+ i (* 2 (to_int (* (/ 1 2) (to_real (* (- 1) i))))))))))))))))
The assertion is satisfied!
forward [2] times, backtracks [1] times
backward [1] times
