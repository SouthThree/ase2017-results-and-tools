Loading grammar file /home/spencerxiao/Experiments/tacas17/FiB_Tool/IMP_Program.cgt succesfully
verifying assertion: (((k + i) + j) > (2 * n))
find an inductive invaraint based on concrete reachables
invariant size: 508
interp: (let ((.def_117 (<= 0 i))) (let ((.def_124 (+ k (+ (* (- 1) i) j)))) (let ((.def_126 (<= 0 .def_124))) (let ((.def_133 (+ k j))) (let ((.def_217 (<= 2 i))) (let ((.def_218 (not .def_217))) (let ((.def_275 (+ k (+ i j)))) (let ((.def_291 (and (<= 1 .def_133) (<= 2 .def_275)))) (let ((.def_383 (<= 3 i))) (let ((.def_491 (+ k (+ (* 2 i) j)))) (let ((.def_501 (<= 0 .def_491))) (let ((.def_625 (<= 4 i))) (let ((.def_883 (+ k (+ (* 3 i) j)))) (let ((.def_1230 (+ k (+ (* 4 i) j)))) (let ((.def_1624 (<= 12 .def_491))) (let ((.def_1680 (+ k (+ (* 5 i) j)))) (let ((.def_2043 (<= 39 .def_883))) (let ((.def_2309 (+ k (+ (* 6 i) j)))) (let ((.def_2710 (<= 45 .def_1230))) (let ((.def_3154 (+ k (+ (* 7 i) j)))) (let ((.def_3167 (<= (to_real 11) (to_real .def_1230)))) (let ((.def_3323 (<= 51 .def_1680))) (let ((.def_3325 (<= 57 .def_2309))) (let ((.def_3327 (<= 63 .def_3154))) (let ((.def_4101 (not (<= 34 .def_2309)))) (let ((.def_4103 (not (<= 19 .def_2309)))) (let ((.def_4138 (+ k (+ (* 8 i) j)))) (let ((.def_5410 (+ k (+ (* 9 i) j)))) (let ((.def_6715 (+ k (+ (* 10 i) j)))) (let ((.def_8021 (+ k (+ (* 11 i) j)))) (let ((.def_8302 (and (<= 6 .def_133) (<= 9 .def_275)))) (let ((.def_10539 (+ k (+ (* 12 i) j)))) (let ((.def_11095 (<= 13 i))) (let ((.def_11736 (and .def_217 .def_3167))) (let ((.def_11740 (and .def_126 (and .def_1624 .def_8302)))) (let ((.def_11897 (<= (to_real 58) (to_real .def_10539)))) (let ((.def_11960 (not (and (and .def_11095 (<= 78 .def_124)) (and .def_11095 (<= (to_real 247) (to_real .def_10539))))))) (let ((.def_11961 (and (and (not (<= 0 .def_8021)) (and (not (<= 12 .def_8021)) (and (and (not (<= 39 .def_8021)) (and (and (not (<= 54 .def_8021)) (and (not (<= 187 .def_8021)) (not (<= 70 .def_8021)))) (not (<= 210 .def_8021)))) (not (<= 165 .def_8021))))) .def_11960))) (let ((.def_11971 (and (not (<= 25 .def_8021)) (and (and (not (<= 87 .def_8021)) (and (and (not (<= 144 .def_8021)) .def_11961) (and (and .def_11961 (not (<= 105 .def_8021))) (not (<= 99 .def_8021))))) (not (<= 124 .def_8021)))))) (let ((.def_11972 (not .def_11971))) (let ((.def_12017 (not (and (<= 55 .def_124) (and (<= 66 .def_133) (and (<= 77 .def_275) (and (<= 88 .def_491) (and (<= 99 .def_883) (and (<= 110 .def_1230) (and (<= 121 .def_1680) (and (<= 132 .def_2309) (and (<= 143 .def_3154) (and (<= 154 .def_4138) (and (<= 165 .def_5410) (<= 176 .def_6715))))))))))))))) (let ((.def_12019 (not (and (<= 36 .def_124) (and (<= 45 .def_133) (and (<= 54 .def_275) (and (<= 63 .def_491) (and (<= 72 .def_883) (and (<= 81 .def_1230) (and (<= 90 .def_1680) (and (<= 99 .def_2309) (and (<= 108 .def_3154) (and (<= 117 .def_4138) (and (<= 126 .def_5410) (<= 135 .def_6715))))))))))))))) (let ((.def_12030 (and .def_126 (and .def_8302 (and .def_1624 (and (and (<= 15 .def_883) (and (<= 18 .def_1230) (and (<= 21 .def_1680) (<= 24 .def_2309)))) (and (and (<= 27 .def_3154) (and (<= 30 .def_4138) (and (<= 33 .def_5410) (<= 36 .def_6715)))) .def_11972))))))) (let ((.def_12035 (not (and .def_11960 (and (and (not (and (or .def_117 .def_11736) (and (and (and (or (and (<= 0 .def_883) (or (and .def_126 (and (<= 0 .def_1230) (and .def_501 (and .def_117 (and (<= 0 .def_133) (<= 0 .def_275)))))) (and (<= 5 .def_1230) (and .def_126 (and .def_291 .def_501))))) (and .def_3167 (and (<= 9 .def_883) (and .def_501 (and .def_126 .def_291))))) (not (and (not (and (<= 13 .def_1680) (<= 15 .def_2309))) (and (not (and (<= 0 .def_1680) (<= 0 .def_2309))) (not (and (<= 6 .def_1680) (<= 7 .def_2309))))))) (not (and (and (not (and (<= 9 .def_4138) (<= 10 .def_5410))) (not (and (<= 19 .def_4138) (<= 21 .def_5410)))) (not (and (<= 0 .def_4138) (<= 0 .def_5410)))))) .def_11972))) (not (and .def_383 (and .def_11972 (not (and (and (not (and (and (not (and (and (and (not (and (or (and .def_11740 (or (and (<= 22 .def_883) (<= 26 .def_1230)) (and (<= 85 .def_883) (<= 95 .def_1230)))) (and (<= 25 .def_491) (and (<= 30 .def_883) (and (<= 35 .def_1230) (and .def_126 .def_8302))))) (or (<= 30 .def_1680) (<= 15 .def_1680)))) (not (and .def_2043 (and .def_2710 (and .def_3323 .def_11740))))) (not (and (<= 60 .def_883) (and (<= 68 .def_1230) (and (<= 76 .def_1680) .def_11740))))) (not (and (<= 49 .def_883) (and (<= 56 .def_1230) (and (<= 63 .def_1680) .def_11740)))))) (or (and (<= 55 .def_4138) (<= 60 .def_5410)) (and .def_625 (not (and (not (<= 25 .def_2309)) (and (and (not (<= 31 .def_2309)) (and .def_4103 (not (<= 28 .def_2309)))) (not (<= 33 .def_2309)))))))) (not (and .def_4101 (and .def_4103 (and .def_4101 (and (not (<= 70 .def_2309)) (and (not .def_3325) (not (<= 84 .def_2309)))))))))) .def_12017) .def_12019)))))) (not (and .def_383 .def_12030))))))) (let ((.def_12046 (not (and .def_11960 (and (not (<= 155 .def_6715)) (and (not (<= 50 .def_6715)) (not (<= 198 .def_6715)))))))) (let ((.def_12056 (not (and .def_3327 (and (<= 81 .def_6715) .def_12035))))) (let ((.def_12070 (or .def_11971 (and .def_12019 (and .def_12017 (and (and (and (and (and .def_11960 (not (and (and (<= 38 .def_3154) .def_12035) .def_12046))) (not (and .def_12046 (and .def_3327 .def_12035)))) .def_12056) (not (and (<= 65 .def_6715) (and (<= 50 .def_3154) .def_12035)))) (not (and (<= 8 .def_3154) (and (<= 11 .def_6715) .def_12035))))))))) (let ((.def_12092 (not (and .def_217 .def_11897)))) (let ((.def_12094 (and .def_11960 (and (not .def_11736) .def_12092)))) (let ((.def_12098 (not .def_11897))) (let ((.def_12105 (and .def_12092 (or (and .def_218 (and (not (<= 1 i)) .def_12094)) (and (and .def_12094 .def_12098) (not (<= (to_real 13) (to_real .def_10539)))))))) (not (and (or (and (and (and .def_12056 (and (not (and (<= 17 .def_3154) (and (<= 23 .def_6715) .def_12035))) .def_12070)) (or .def_11971 (and .def_12019 (and .def_12017 (and .def_12070 (not (and .def_501 (and .def_126 (and .def_2043 (and .def_2710 (and .def_3323 (and .def_3325 (and .def_3327 (and (and .def_625 .def_8302) .def_12046)))))))))))))) (not .def_12030)) (and (or (and .def_218 .def_12105) (and .def_12098 .def_12105)) (not (and .def_217 (<= (to_real 42) (to_real .def_10539)))))) (not (and (<= 0 .def_3154) (and (<= 0 .def_6715) .def_12035))))))))))))))))))))))))))))))))))))))))))))))))))))))))
The assertion is satisfied!
forward [26] times, backtracks [12] times
backward [14] times
